0,{"$type":".RootFolder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"File","EditWindow":""}],"AttributeCount":1}
1,{"$type":".ProjSettings, LuaSTGEditorSharp","Attributes":[{"attrCap":"Output Name","attrInput":"","EditWindow":""},{"attrCap":"Author","attrInput":"LuaSTG User","EditWindow":""},{"attrCap":"Allow practice","attrInput":"true","EditWindow":"bool"},{"attrCap":"Allow sc practice","attrInput":"true","EditWindow":"bool"}],"AttributeCount":4}
1,{"$type":".EditorVersion, LuaSTGEditorSharp","Attributes":[{"attrCap":"Editor version","attrInput":"0.0.7.7","EditWindow":""}],"AttributeCount":1}
1,{"$type":".General.Folder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"Resources","EditWindow":""}],"AttributeCount":1}
2,{"$type":".General.Folder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"小东西","EditWindow":""}],"AttributeCount":1,"IsExpanded":false}
3,{"$type":".Laser.LaserDefine, ","Attributes":[{"attrCap":"Name","attrInput":"SSWTLZZ_laser3_","EditWindow":""},{"attrCap":"Difficulty","attrInput":"All","EditWindow":"objDifficulty"}],"AttributeCount":2,"IsExpanded":false}
4,{"$type":".Laser.LaserInit, ","Attributes":[{"attrCap":"Parameter List","attrInput":"a,time,w,co","EditWindow":""},{"attrCap":"Color","attrInput":"co or COLOR_GRAY","EditWindow":"color"},{"attrCap":"Style","attrInput":"1","EditWindow":"laserStyle"},{"attrCap":"Head Length","attrInput":"1","EditWindow":"length"},{"attrCap":"Body Length","attrInput":"1","EditWindow":"length"},{"attrCap":"Tail Length","attrInput":"1","EditWindow":"length"},{"attrCap":"Width","attrInput":"w","EditWindow":"length"},{"attrCap":"Node size","attrInput":"0","EditWindow":""},{"attrCap":"Head size","attrInput":"6","EditWindow":""}],"AttributeCount":9}
5,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.rot=a\r\nself.layer=self.layer-5\r\nself.bound = false","EditWindow":"code"}],"AttributeCount":1}
5,{"$type":".Task.TaskNode, ","Attributes":[]}
6,{"$type":".Laser.LaserTurnHalfOn, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Time","attrInput":"5","EditWindow":"time"},{"attrCap":"Wait in this Task","attrInput":"true","EditWindow":"bool"}],"AttributeCount":3}
6,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"time","EditWindow":"yield"}],"AttributeCount":1}
6,{"$type":".Laser.LaserTurnOff, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Time","attrInput":"30","EditWindow":"time"},{"attrCap":"Wait in this Task","attrInput":"true","EditWindow":"bool"}],"AttributeCount":3}
6,{"$type":".Object.Del, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Trigger event","attrInput":"false","EditWindow":"bool"}],"AttributeCount":2}
4,{"$type":".Object.CallBackFunc, ","Attributes":[{"attrCap":"Event type","attrInput":"kill","EditWindow":"event"}],"AttributeCount":1}
5,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.class.base.del(self)","EditWindow":"code"}],"AttributeCount":1}
3,{"$type":".Laser.LaserDefine, ","Attributes":[{"attrCap":"Name","attrInput":"SSWTLZZ_laser2_","EditWindow":""},{"attrCap":"Difficulty","attrInput":"All","EditWindow":"objDifficulty"}],"AttributeCount":2,"IsExpanded":false}
4,{"$type":".Laser.LaserInit, ","Attributes":[{"attrCap":"Parameter List","attrInput":"a,time,w","EditWindow":""},{"attrCap":"Color","attrInput":"COLOR_GRAY","EditWindow":"color"},{"attrCap":"Style","attrInput":"1","EditWindow":"laserStyle"},{"attrCap":"Head Length","attrInput":"1","EditWindow":"length"},{"attrCap":"Body Length","attrInput":"1","EditWindow":"length"},{"attrCap":"Tail Length","attrInput":"1","EditWindow":"length"},{"attrCap":"Width","attrInput":"w","EditWindow":"length"},{"attrCap":"Node size","attrInput":"0","EditWindow":""},{"attrCap":"Head size","attrInput":"6","EditWindow":""}],"AttributeCount":9}
5,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.rot=a\r\nself.layer=self.layer-5","EditWindow":"code"}],"AttributeCount":1}
5,{"$type":".Task.TaskNode, ","Attributes":[]}
6,{"$type":".Laser.LaserTurnHalfOn, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Time","attrInput":"1","EditWindow":"time"},{"attrCap":"Wait in this Task","attrInput":"true","EditWindow":"bool"}],"AttributeCount":3}
6,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"time","EditWindow":"yield"}],"AttributeCount":1}
6,{"$type":".Object.Del, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Trigger event","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2}
4,{"$type":".Object.CallBackFunc, ","Attributes":[{"attrCap":"Event type","attrInput":"kill","EditWindow":"event"}],"AttributeCount":1}
5,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.class.base.del(self)","EditWindow":"code"}],"AttributeCount":1}
3,{"$type":".Laser.LaserDefine, ","Attributes":[{"attrCap":"Name","attrInput":"SSWTLZZ_laser1_","EditWindow":""},{"attrCap":"Difficulty","attrInput":"All","EditWindow":"objDifficulty"}],"AttributeCount":2,"IsExpanded":false}
4,{"$type":".Laser.LaserInit, ","Attributes":[{"attrCap":"Parameter List","attrInput":"a,time,w","EditWindow":""},{"attrCap":"Color","attrInput":"COLOR_GRAY","EditWindow":"color"},{"attrCap":"Style","attrInput":"1","EditWindow":"laserStyle"},{"attrCap":"Head Length","attrInput":"0","EditWindow":"length"},{"attrCap":"Body Length","attrInput":"640","EditWindow":"length"},{"attrCap":"Tail Length","attrInput":"0","EditWindow":"length"},{"attrCap":"Width","attrInput":"w","EditWindow":"length"},{"attrCap":"Node size","attrInput":"0","EditWindow":""},{"attrCap":"Head size","attrInput":"0","EditWindow":""}],"AttributeCount":9}
5,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.rot=a\r\nself.layer=self.layer-5","EditWindow":"code"}],"AttributeCount":1}
5,{"$type":".General.Comment, LuaSTGEditorSharp","Attributes":[{"attrCap":"Comment","attrInput":"","EditWindow":""},{"attrCap":"Comment on child","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2,"IsExpanded":false}
6,{"$type":".Task.TaskNode, ","Attributes":[]}
7,{"$type":".Advanced.AdvancedRepeat.AdvancedRepeat, LuaSTGEditorSharp","Attributes":[{"attrCap":"Times","attrInput":"7","EditWindow":"yield"}],"AttributeCount":1}
8,{"$type":".Advanced.AdvancedRepeat.VariableCollection, LuaSTGEditorSharp","Attributes":[]}
9,{"$type":".Advanced.AdvancedRepeat.LinearVariable, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"r","EditWindow":""},{"attrCap":"From","attrInput":"0","EditWindow":""},{"attrCap":"To","attrInput":"15","EditWindow":""},{"attrCap":"Precisely","attrInput":"true","EditWindow":"bool"},{"attrCap":"Mode","attrInput":"MOVE_DECEL","EditWindow":"interpolation"}],"AttributeCount":5}
8,{"$type":".Advanced.AdvancedRepeat.AdvancedRepeat, LuaSTGEditorSharp","Attributes":[{"attrCap":"Times","attrInput":"2","EditWindow":"yield"}],"AttributeCount":1}
9,{"$type":".Advanced.AdvancedRepeat.VariableCollection, LuaSTGEditorSharp","Attributes":[]}
10,{"$type":".Advanced.AdvancedRepeat.IncrementVariable, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"aa","EditWindow":""},{"attrCap":"Initial value","attrInput":"-90","EditWindow":""},{"attrCap":"Increment","attrInput":"180","EditWindow":""}],"AttributeCount":3}
9,{"$type":".Laser.CreateLaser, ","Attributes":[{"attrCap":"Name","attrInput":"\"SSWTLZZ_laser1_\"","EditWindow":"laserDef"},{"attrCap":"Position","attrInput":"xx+r*cos(aa+rot),yy+r*sin(aa+rot)","EditWindow":"position"},{"attrCap":"Parameters","attrInput":"rot, 14, 6","EditWindow":"laserParam"}],"AttributeCount":3}
9,{"$type":".Object.SetBlend, ","Attributes":[{"attrCap":"Target","attrInput":"last","EditWindow":"target"},{"attrCap":"Blend Mode","attrInput":"\"mul+add\"","EditWindow":"blend"},{"attrCap":"ARGB","attrInput":"255,74,74,255","EditWindow":"ARGB"}],"AttributeCount":3}
8,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"2","EditWindow":"yield"}],"AttributeCount":1}
5,{"$type":".Task.TaskNode, ","Attributes":[]}
6,{"$type":".Laser.LaserTurnHalfOn, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Time","attrInput":"5","EditWindow":"time"},{"attrCap":"Wait in this Task","attrInput":"true","EditWindow":"bool"}],"AttributeCount":3}
6,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"time","EditWindow":"yield"}],"AttributeCount":1}
6,{"$type":".Laser.LaserTurnOff, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Time","attrInput":"5","EditWindow":"time"},{"attrCap":"Wait in this Task","attrInput":"true","EditWindow":"bool"}],"AttributeCount":3}
6,{"$type":".Object.Del, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Trigger event","attrInput":"false","EditWindow":"bool"}],"AttributeCount":2}
4,{"$type":".Object.CallBackFunc, ","Attributes":[{"attrCap":"Event type","attrInput":"kill","EditWindow":"event"}],"AttributeCount":1}
5,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.class.base.del(self)","EditWindow":"code"}],"AttributeCount":1}
3,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"local function convert_num(num2)\r\n\tlocal num = num2 % 360\r\n\tif num > 180 then\r\n\t\tnum = num - 360\r\n\tend\r\n\treturn num\r\nend","EditWindow":"code"}],"AttributeCount":1}
3,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"\r\nlocal function rotate_pos(x,y,rot)\r\n\treturn x*cos(rot)-y*sin(rot),y*cos(rot)+x*sin(rot)\r\nend\r\n\r\nslashclass = Class(object)\r\nfunction slashclass:init(o, speed, alpha, mul, color, interval, dscale)\r\n\tinterval = interval or 1\r\n\tdscale = dscale or 0\r\n\tself.bound = false\r\n\tself.group = GROUP_GHOST\r\n\tself.layer = o.layer - 1\r\n\tself.sl = {}\r\n\tself.slcount = int(speed/interval)\r\n\tself.speed = speed\r\n\tself.alpha = alpha\r\n\tif not CheckRes(\"img\",'_'..o.img) then\r\n\t\tCopyImage('_'..o.img,o.img)\r\n\tend\r\n\tself.img = '_'..o.img\r\n\tself.mul = mul or 'mul+add'\r\n\tself.o = o\r\n\tself.color = color or nil\r\n\to.slash = self\r\n\tself.dscale = dscale or 0\r\n\tself.interval = interval or 1\r\nend\r\n\r\nfunction slashclass:frame()\r\n\tif IsValid(self.o) and not self.stop then\r\n\t\tlocal o, r = self.o, self.slcount\r\n\t\tif self.timer % self.interval == 0 then\r\n\t\t\tif not CheckRes('_' .. o.img) then\r\n\t\t\t\tCopyImage('_' .. o.img,o.img)\r\n\t\t\tend\r\n\t\t\ttable.insert(self.sl, {img = '_' .. o.img, x = o.x, y = o.y, rot = o.rot, alpha = self.alpha, hscale = o.hscale, vscale = o.vscale })\r\n\t\tend\r\n\t\tif #self.sl > r then\r\n\t\t\ttable.remove(self.sl, 1)\r\n\t\tend\r\n\telseif self.sl[#self.sl].alpha <= 0 then\r\n\t\tDel(self)\r\n\tend\r\n\tfor i = 1, #self.sl do\r\n\t\tself.sl[i].alpha = max(0, self.sl[i].alpha - (self.alpha / self.speed))\r\n\t\tself.sl[i].hscale = max(self.sl[i].hscale + self.dscale, 0)\r\n\t\tself.sl[i].vscale = max(self.sl[i].vscale + self.dscale, 0)\r\n\tend\r\nend\r\n\r\nfunction slashclass:render()\r\n\tfor i = 1, #self.sl do\r\n\t\tif self.sl[i].alpha > 0 then\r\n\t\t\tif self.color then\r\n\t\t\t\tlocal c = self.color\r\n\t\t\t\tSetImageState(self.sl[i].img, self.mul, Color(self.sl[i].alpha, c[1], c[2], c[3]))\r\n\t\t\telse\r\n\t\t\t\tSetImageState(self.sl[i].img, self.mul, Color(self.sl[i].alpha, 255, 255, 255))\r\n\t\t\tend\r\n\t\t\tRender(self.sl[i].img, self.sl[i].x, self.sl[i].y, self.sl[i].rot, self.sl[i].hscale, self.sl[i].vscale)\r\n\t\tend\r\n\tend\r\nend\r\n","EditWindow":"code"}],"AttributeCount":1}
3,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"function HSVtoRGB(H,S,V)\r\n\t--H在0~360度之间,S在0~1之间,V在0~1之间\r\n\tlocal R,G,B,C,X,R1,G1,B1,m\r\n\tC=V*S\r\n\tX=C*(1-abs((H/60)%2-1))\r\n\tm=V-C\r\n\tif H>=0 and H<60 then\r\n\tR1,G1,B1=C,X,0\r\n\telseif H<120 then\r\n\tR1,G1,B1=X,C,0\r\n\telseif H<180 then\r\n\tR1,G1,B1=0,C,X\r\n\telseif H<240 then\r\n\tR1,G1,B1=0,X,C\r\n\telseif H<300 then\r\n\tR1,G1,B1=X,0,C\r\n\telseif H<360 then\r\n \tR1,G1,B1=C,0,X\r\n\tend\r\n\tR,G,B=(R1+m)*255,(G1+m)*255,(B1+m)*255\r\n\treturn R,G,B\r\nend","EditWindow":"code"}],"AttributeCount":1}
2,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"local function _circle(x,y,radius,angle,hs)\r\n\ths = hs or 1\r\n\treturn x+radius*cos(angle)*hs,y+radius*sin(angle)\r\nend","EditWindow":"code"}],"AttributeCount":1}
2,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"CopyImage(\"SSW_white_scbg\", \"white\")\r\nCopyImage(\"SSW_white\", \"white\")\r\nCopyImage(\"SSW_ball_huge_dark1\", \"ball_huge_dark1\")","EditWindow":"code"}],"AttributeCount":1}
2,{"$type":".Audio.LoadBGM, ","FileType":"audioFile","Attributes":[{"$type":".DependencyAttrItem, ","attrCap":"Path","attrInput":"SSWTLZZ_bgm.ogg","EditWindow":"audioFile"},{"attrCap":"Resource name","attrInput":"SSWTLZZ_bgm","EditWindow":""},{"attrCap":"Loop end (sec)","attrInput":"4410600/44100","EditWindow":""},{"attrCap":"Loop length (sec)","attrInput":"(4410600- 817664)/44100","EditWindow":""}],"AttributeCount":4}
2,{"$type":".Graphics.LoadImage, ","FileType":"imageFile","Attributes":[{"$type":".DependencyAttrItem, ","attrCap":"Path","attrInput":"SSWTLZZ_scbg1.png","EditWindow":"imageFile"},{"attrCap":"Resource name","attrInput":"SSWTLZZ_scbg1","EditWindow":""},{"attrCap":"Mipmap","attrInput":"true","EditWindow":"bool"},{"attrCap":"Collision size","attrInput":"0,0","EditWindow":"size"},{"attrCap":"Rectangle collision","attrInput":"false","EditWindow":"bool"},{"attrCap":"Cut edge","attrInput":"0","EditWindow":""}],"AttributeCount":6}
2,{"$type":".Graphics.LoadImage, ","FileType":"imageFile","Attributes":[{"$type":".DependencyAttrItem, ","attrCap":"Path","attrInput":"SSWTLZZ_scbg2.png","EditWindow":"imageFile"},{"attrCap":"Resource name","attrInput":"SSWTLZZ_scbg2","EditWindow":""},{"attrCap":"Mipmap","attrInput":"true","EditWindow":"bool"},{"attrCap":"Collision size","attrInput":"0,0","EditWindow":"size"},{"attrCap":"Rectangle collision","attrInput":"false","EditWindow":"bool"},{"attrCap":"Cut edge","attrInput":"0","EditWindow":""}],"AttributeCount":6}
2,{"$type":".Graphics.LoadImage, ","FileType":"imageFile","Attributes":[{"$type":".DependencyAttrItem, ","attrCap":"Path","attrInput":"SSWTLZZ_scbg3.png","EditWindow":"imageFile"},{"attrCap":"Resource name","attrInput":"SSWTLZZ_scbg3","EditWindow":""},{"attrCap":"Mipmap","attrInput":"true","EditWindow":"bool"},{"attrCap":"Collision size","attrInput":"0,0","EditWindow":"size"},{"attrCap":"Rectangle collision","attrInput":"false","EditWindow":"bool"},{"attrCap":"Cut edge","attrInput":"0","EditWindow":""}],"AttributeCount":6}
1,{"$type":".General.Folder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"Classes","EditWindow":""}],"AttributeCount":1}
2,{"$type":".Boss.BossBGDefine, ","Attributes":[{"attrCap":"Name","attrInput":"SSWTLZZ_scbg","EditWindow":""}],"AttributeCount":1,"IsExpanded":false}
3,{"$type":".Boss.BossBGLayer, ","Attributes":[{"attrCap":"Image","attrInput":"\"image:SSWTLZZ_scbg2\"","EditWindow":"image"},{"attrCap":"Is tile","attrInput":"false","EditWindow":"bool"},{"attrCap":"Position","attrInput":"0,0","EditWindow":"position"},{"attrCap":"Rotation","attrInput":"0","EditWindow":"rotation"},{"attrCap":"Velocity(x,y)","attrInput":"0,0","EditWindow":"velocityPos"},{"attrCap":"Omiga","attrInput":"0","EditWindow":"omega"},{"attrCap":"Blend mode","attrInput":"\"mul+add\"","EditWindow":"blend"},{"attrCap":"Scale","attrInput":"1,1","EditWindow":""}],"AttributeCount":8}
4,{"$type":".Boss.BossBGLayerInit, ","Attributes":[]}
5,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.a = 64\r\nself.r = 255 * 0.95\r\nself.g = 255 * 0.95\r\nself.b = 255","EditWindow":"code"}],"AttributeCount":1}
4,{"$type":".Boss.BossBGLayerFrame, ","Attributes":[]}
5,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.r = (sin(self.timer) + 1) / 2 * 0.05 + 0.95\r\nself.a = (sin(self.timer) + 1) / 2 * 64","EditWindow":"code"}],"AttributeCount":1}
4,{"$type":".Boss.BossBGLayerRender, ","Attributes":[]}
3,{"$type":".Boss.BossBGLayer, ","Attributes":[{"attrCap":"Image","attrInput":"\"image:SSWTLZZ_scbg1\"","EditWindow":"image"},{"attrCap":"Is tile","attrInput":"true","EditWindow":"bool"},{"attrCap":"Position","attrInput":"0,0","EditWindow":"position"},{"attrCap":"Rotation","attrInput":"0","EditWindow":"rotation"},{"attrCap":"Velocity(x,y)","attrInput":"0,0.3","EditWindow":"velocityPos"},{"attrCap":"Omiga","attrInput":"0","EditWindow":"omega"},{"attrCap":"Blend mode","attrInput":"\"mul+mul\"","EditWindow":"blend"},{"attrCap":"Scale","attrInput":"1,1","EditWindow":""}],"AttributeCount":8}
4,{"$type":".Boss.BossBGLayerInit, ","Attributes":[]}
4,{"$type":".Boss.BossBGLayerFrame, ","Attributes":[]}
4,{"$type":".Boss.BossBGLayerRender, ","Attributes":[]}
3,{"$type":".Boss.BossBGLayer, ","Attributes":[{"attrCap":"Image","attrInput":"\"image:SSWTLZZ_scbg3\"","EditWindow":"image"},{"attrCap":"Is tile","attrInput":"false","EditWindow":"bool"},{"attrCap":"Position","attrInput":"0,0","EditWindow":"position"},{"attrCap":"Rotation","attrInput":"0","EditWindow":"rotation"},{"attrCap":"Velocity(x,y)","attrInput":"0,0","EditWindow":"velocityPos"},{"attrCap":"Omiga","attrInput":"-0.25","EditWindow":"omega"},{"attrCap":"Blend mode","attrInput":"\"\"","EditWindow":"blend"},{"attrCap":"Scale","attrInput":"1.5,1.5","EditWindow":""}],"AttributeCount":8}
4,{"$type":".Boss.BossBGLayerInit, ","Attributes":[]}
4,{"$type":".Boss.BossBGLayerFrame, ","Attributes":[]}
4,{"$type":".Boss.BossBGLayerRender, ","Attributes":[]}
2,{"$type":".Data.Function, ","Attributes":[{"attrCap":"Name","attrInput":"_render_hp_bar","EditWindow":""},{"attrCap":"Parameter List","attrInput":"obj","EditWindow":""},{"attrCap":"Localized","attrInput":"true","EditWindow":"bool"}],"AttributeCount":3,"IsExpanded":false}
3,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"local self = _boss.ui.hpbar\r\nlocal _ui = self.ui\r\nlocal b = self.system.boss\r\nif not (self.ui.drawhp) or not (IsValid(b)) or not (IsValid(_ui)) then\r\n    return\r\nend\r\nlocal _ox, _oy = b.x, b.y\r\nb.x, b.y = obj.x, obj.y\r\nlocal alpha1 = 1 - b.hp_flag / 30\r\nSetImageState(\"base_hp\", \"\", Color(alpha1 * 255, 255, 0, 0))\r\nSetImageState(\"hpbar1\", \"\", Color(alpha1 * 255, 255, 255, 255))\r\nSetImageState(\"hpbar2\", \"\", Color(0, 255, 255, 255))\r\nSetImageState(\"life_node\", \"\", Color(alpha1 * 255, 255, 255, 255))\r\n\r\nlocal mode, type\r\nif not b.__hpbartype2 then\r\n    if not (_ui.hpbarcolor1) and not (_ui.hpbarcolor2) then\r\n        mode = -1 --无血条（时符等）\r\n    elseif not (_ui.hpbarcolor2) then\r\n        mode = 0\r\n        type = 1 --全血条（符卡）\r\n    elseif not (_ui.hpbarcolor1) then\r\n        mode = 0\r\n        type = 2 --全血条（非符）\r\n    elseif _ui.hpbarcolor1 == _ui.hpbarcolor2 then\r\n        mode = 2 --组合血条（符卡）\r\n    elseif _ui.hpbarcolor1 ~= _ui.hpbarcolor2 then\r\n        mode = 1 --组合血条（非符）\r\n    end\r\n    if mode == -1 then\r\n    elseif mode == 0 and type == 1 then\r\n        misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n        misc.Renderhp(b.x, b.y, 90, 360, 60, 64, 360, b.hpbarlen * min(1, b.__hpbar_timer / 60))\r\n        Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n        Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n        if b.sp_point and #b.sp_point ~= 0 then\r\n            for i = 1, #b.sp_point do\r\n                Render(\"life_node\", b.x + 61 * cos(b.sp_point[i]), b.y + 61 * sin(b.sp_point[i]), b.sp_point[i] - 90, 0.5)\r\n            end\r\n        end\r\n        if b._sp_point_auto and #b._sp_point_auto ~= 0 then\r\n            local p, a\r\n            for i = 1, #b._sp_point_auto do\r\n                p = b._sp_point_auto[i]\r\n                a = 90 - (p.dmg / b.maxhp) * 360\r\n                Render(\"life_node\", b.x + 61 * cos(a), b.y + 61 * sin(a), a - 90, 0.5)\r\n            end\r\n        end\r\n    elseif mode == 0 and type == 2 then\r\n        misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n        misc.Renderhp(b.x, b.y, 90, 360, 60, 64, 360, b.hpbarlen * min(1, b.__hpbar_timer / 60))\r\n        Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n        Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n        if b.sp_point and #b.sp_point ~= 0 then\r\n            for i = 1, #b.sp_point do\r\n                Render(\"life_node\", b.x + 61 * cos(b.sp_point[i]), b.y + 61 * sin(b.sp_point[i]), b.sp_point[i] - 90, 0.5)\r\n            end\r\n        end\r\n        if b._sp_point_auto and #b._sp_point_auto ~= 0 then\r\n            local p, a\r\n            for i = 1, #b._sp_point_auto do\r\n                p = b._sp_point_auto[i]\r\n                a = 90 - (p.dmg / b.maxhp) * 360\r\n                Render(\"life_node\", b.x + 61 * cos(a), b.y + 61 * sin(a), a - 90, 0.5)\r\n            end\r\n        end\r\n    elseif mode == 2 then\r\n        misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n        misc.Renderhp(b.x, b.y, 90, b.lifepoint - 90, 60, 64, b.lifepoint - 88, b.hpbarlen)\r\n        Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n        Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n    elseif mode == 1 then\r\n        misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n        if b.timer <= 60 then\r\n            misc.Renderhp(b.x, b.y, 90, 360, 60, 64, 360, b.hpbarlen * min(1, b.__hpbar_timer / 60))\r\n        else\r\n            misc.Renderhp(b.x, b.y, 90, b.lifepoint - 90, 60, 64, b.lifepoint - 88, 1)\r\n            misc.Renderhp(b.x, b.y, b.lifepoint, 450 - b.lifepoint, 60, 64, 450 - b.lifepoint, b.hpbarlen)\r\n        end\r\n        Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n        Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n        Render(\"life_node\", b.x + 61 * cos(b.lifepoint), b.y + 61 * sin(b.lifepoint), b.lifepoint - 90, 0.55)\r\n        SetFontState(\"bonus\", \"\", Color(255, 255, 255, 255))\r\n    end\r\nelse\r\n    if not _ui.hpbarcolor3 then\r\n        if not (_ui.hpbarcolor1) and not (_ui.hpbarcolor2) then\r\n            mode = -1 --无血条（时符等）\r\n        elseif not (_ui.hpbarcolor2) then\r\n            mode = 0\r\n            type = 1 --全血条（符卡）\r\n        elseif not (_ui.hpbarcolor1) then\r\n            mode = 0\r\n            type = 2 --全血条（非符）（mode=3）\r\n        elseif _ui.hpbarcolor1 == _ui.hpbarcolor2 then\r\n            mode = 2 --组合血条（符卡）\r\n        elseif _ui.hpbarcolor1 ~= _ui.hpbarcolor2 then\r\n            mode = 1 --组合血条（非符）\r\n        end\r\n    else\r\n        if not (_ui.hpbarcolor2) then\r\n            mode = 4\r\n        elseif not (_ui.hpbarcolor1) then\r\n            mode = 5\r\n        elseif _ui.hpbarcolor1 == _ui.hpbarcolor2 then\r\n            mode = 6\r\n        elseif _ui.hpbarcolor1 ~= _ui.hpbarcolor2 then\r\n            mode = 7\r\n        end\r\n    end\r\n\r\n    local flag2 = int(b.__hpbartype2 / 10)\r\n    if flag2 == 1 then\r\n        if mode == -1 then\r\n        elseif mode == 0 and type == 1 then\r\n            misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n            misc.Renderhp(b.x, b.y, 90, 360, 60, 64, 360, b.hpbarlen * min(1, b.__hpbar_timer / b.__hpbar_rendertime))\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n            if b.sp_point and #b.sp_point ~= 0 then\r\n                for i = 1, #b.sp_point do\r\n                    Render(\"life_node\", b.x + 61 * cos(b.sp_point[i]), b.y + 61 * sin(b.sp_point[i]), b.sp_point[i] - 90, 0.5)\r\n                end\r\n            end\r\n            if b._sp_point_auto and #b._sp_point_auto ~= 0 then\r\n                local p, a\r\n                for i = 1, #b._sp_point_auto do\r\n                    p = b._sp_point_auto[i]\r\n                    a = 90 - (p.dmg / b.maxhp) * 360\r\n                    Render(\"life_node\", b.x + 61 * cos(a), b.y + 61 * sin(a), a - 90, 0.5)\r\n                end\r\n            end\r\n        elseif mode == 0 and type == 2 then\r\n            misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n            misc.Renderhp(b.x, b.y, 90, 360, 60, 64, 360, b.hpbarlen * min(1, b.__hpbar_timer / b.__hpbar_rendertime))\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n            if b.sp_point and #b.sp_point ~= 0 then\r\n                for i = 1, #b.sp_point do\r\n                    Render(\"life_node\", b.x + 61 * cos(b.sp_point[i]), b.y + 61 * sin(b.sp_point[i]), b.sp_point[i] - 90, 0.5)\r\n                end\r\n            end\r\n            if b._sp_point_auto and #b._sp_point_auto ~= 0 then\r\n                local p, a\r\n                for i = 1, #b._sp_point_auto do\r\n                    p = b._sp_point_auto[i]\r\n                    a = 90 - (p.dmg / b.maxhp) * 360\r\n                    Render(\"life_node\", b.x + 61 * cos(a), b.y + 61 * sin(a), a - 90, 0.5)\r\n                end\r\n            end\r\n        elseif mode == 2 then\r\n            local now = b.cards[b.card_num]\r\n            local rate = b.__hpbar_defaultpercent * now.hp / b.__hpbar_defaultvalue\r\n            local ang = min(360 * rate, 359)\r\n\r\n            misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n            misc.Renderhp(b.x, b.y, 90, ang, 60, 64, ang + 2, b.hpbarlen)\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n\r\n\r\n        elseif mode == 1 then\r\n            local nextcard\r\n            for n = b.card_num + 1, #b.cards do\r\n                if b.cards[n] and b.cards[n].is_combat then\r\n                    nextcard = b.cards[n]\r\n                    break\r\n                end\r\n            end\r\n            local rate = b.__hpbar_defaultpercent * nextcard.hp / b.__hpbar_defaultvalue\r\n            local ang = min(360 * rate, 359)\r\n\r\n            misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n            if b.__hpbar_timer <= (b.__hpbar_rendertime * rate) then\r\n                misc.Renderhp(b.x, b.y, 90, ang, 60, 64, 360, min(1, b.__hpbar_timer / (b.__hpbar_rendertime * rate)))\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n            else\r\n                misc.Renderhp(b.x, b.y, 90, ang, 60, 64, 360, 1)\r\n                misc.Renderhp(b.x, b.y, 90 + ang, 360 - ang, 60, 64, 360, b.hpbarlen * min(1, (b.__hpbar_timer - (b.__hpbar_rendertime * rate)) / (b.__hpbar_rendertime - (b.__hpbar_rendertime * rate))))\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n                Render(\"life_node\", b.x + 61 * cos(ang + 90), b.y + 61 * sin(ang + 90), ang, 0.55)\r\n            end\r\n        elseif mode == 4 then\r\n            local now = b.cards[b.card_num]\r\n            local rate1 = b.__hpbar_defaultpercent * now.hp / b.__hpbar_defaultvalue\r\n            --local ang1 = min (360 * rate1 , 179)\r\n            local ang1 = 360 * rate1\r\n            local nextcard\r\n            for n = b.card_num + 1, #b.cards do\r\n                if b.cards[n] and b.cards[n].is_combat then\r\n                    nextcard = b.cards[n]\r\n                    break\r\n                end\r\n            end\r\n            local rate2 = b.__hpbar_defaultpercent * nextcard.hp / b.__hpbar_defaultvalue\r\n            --local ang2 = min (360 * rate2 , 179)\r\n            local ang2 = 360 * rate2\r\n            misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n            misc.Renderhp(b.x, b.y, 90, ang2, 60, 64, 360, 1)\r\n            misc.Renderhp(b.x, b.y, 90 + ang2, ang1, 60, 64, ang1 + 2, b.hpbarlen)\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n            Render(\"life_node\", b.x + 61 * cos(ang2 + 90), b.y + 61 * sin(ang2 + 90), ang2, 0.55)\r\n        elseif mode == 5 then\r\n            local nextcard, next2card, temp\r\n            for n = b.card_num + 1, #b.cards do\r\n                if b.cards[n] and b.cards[n].is_combat then\r\n                    nextcard = b.cards[n]\r\n                    temp = n\r\n                    break\r\n                end\r\n            end\r\n            local rate1 = b.__hpbar_defaultpercent * nextcard.hp / b.__hpbar_defaultvalue\r\n            --local ang1 = min (360 * rate1 , 179)\r\n            local ang1 = 360 * rate1\r\n            local R1 = b.__hpbar_rendertime * rate1\r\n\r\n            for n = temp + 1, #b.cards do\r\n                if b.cards[n] and b.cards[n].is_combat then\r\n                    next2card = b.cards[n]\r\n                    break\r\n                end\r\n            end\r\n            local rate2 = b.__hpbar_defaultpercent * next2card.hp / b.__hpbar_defaultvalue\r\n            --local ang2 = min (360 * rate2 , 179)\r\n            local ang2 = 360 * rate2\r\n            local R2 = b.__hpbar_rendertime * rate2\r\n\r\n            local rate_all = rate1 + rate2\r\n            local ang_all = ang1 + ang2\r\n            local R_all = R1 + R2\r\n\r\n            misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n            if b.__hpbar_timer <= (R2) then\r\n                misc.Renderhp(b.x, b.y, 90, ang2, 60, 64, 360, min(1, b.__hpbar_timer / (R2)))\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n            elseif b.__hpbar_timer <= (R1 + R2) then\r\n                misc.Renderhp(b.x, b.y, 90, ang2, 60, 64, 360, 1)\r\n                misc.Renderhp(b.x, b.y, 90 + ang2, ang1, 60, 64, 360, min(1, (b.__hpbar_timer - (R2)) / (R1)))\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n                Render(\"life_node\", b.x + 61 * cos(ang2 + 90), b.y + 61 * sin(ang2 + 90), ang2, 0.55)\r\n            else\r\n                misc.Renderhp(b.x, b.y, 90, ang2, 60, 64, 360, 1)\r\n                misc.Renderhp(b.x, b.y, 90 + ang2, ang1, 60, 64, 360, 1)\r\n                misc.Renderhp(b.x, b.y, 90 + ang_all, 360 - ang_all, 60, 64, 360, b.hpbarlen * min(1, (b.__hpbar_timer - (R_all)) / (b.__hpbar_rendertime * (1 - rate_all))))\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n                Render(\"life_node\", b.x + 61 * cos(ang2 + 90), b.y + 61 * sin(ang2 + 90), ang2, 0.55)\r\n                Render(\"life_node\", b.x + 61 * cos(ang_all + 90), b.y + 61 * sin(ang_all + 90), ang_all, 0.55)\r\n            end\r\n        elseif mode == 6 then\r\n            local nextcard\r\n            for n = b.card_num + 1, #b.cards do\r\n                if b.cards[n] and b.cards[n].is_combat then\r\n                    nextcard = b.cards[n]\r\n                    break\r\n                end\r\n            end\r\n            local now = b.cards[b.card_num]\r\n            local lastcard\r\n            for n = b.card_num - 1, 1, -1 do\r\n                if b.cards[n] and b.cards[n].is_combat then\r\n                    lastcard = b.cards[n]\r\n                    break\r\n                end\r\n            end\r\n\r\n            local rate = b.__hpbar_defaultpercent * nextcard.hp / b.__hpbar_defaultvalue\r\n            --local ang = min (360 * rate , 179)\r\n            local ang = 360 * rate\r\n            local rate2 = (1 - rate) * now.hp / (now.hp + lastcard.hp)\r\n            local ang2 = 360 * rate2\r\n            misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n            misc.Renderhp(b.x, b.y, 90, ang, 60, 64, 360, 1)\r\n            misc.Renderhp(b.x, b.y, 90 + ang, ang2, 60, 64, ang2 + 2, b.hpbarlen)\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n            Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n            Render(\"life_node\", b.x + 61 * cos(ang + 90), b.y + 61 * sin(ang + 90), ang, 0.55)\r\n        elseif mode == 7 then\r\n            local nextcard, next2card, temp\r\n            local now = b.cards[b.card_num]\r\n\r\n            for n = b.card_num + 1, #b.cards do\r\n                if b.cards[n] and b.cards[n].is_combat then\r\n                    nextcard = b.cards[n]\r\n                    temp = n\r\n                    break\r\n                end\r\n            end\r\n\r\n            for n = temp + 1, #b.cards do\r\n                if b.cards[n] and b.cards[n].is_combat then\r\n                    next2card = b.cards[n]\r\n                    break\r\n                end\r\n            end\r\n            local rate2 = b.__hpbar_defaultpercent * next2card.hp / b.__hpbar_defaultvalue\r\n            --local ang2 = min (360 * rate2 , 179)\r\n            local ang2 = 360 * rate2\r\n            local R2 = b.__hpbar_rendertime * rate2\r\n\r\n            local rate1 = (1 - rate2) * nextcard.hp / (now.hp + nextcard.hp)\r\n            local ang1 = 360 * rate1\r\n            local R1 = b.__hpbar_rendertime * rate1\r\n\r\n            local rate_all = rate1 + rate2\r\n            local ang_all = ang1 + ang2\r\n            local R_all = R1 + R2\r\n\r\n            misc.Renderhpbar(b.x, b.y, 90, 360, 60, 64, 360, 1)\r\n            if b.__hpbar_timer <= (R2) then\r\n                misc.Renderhp(b.x, b.y, 90, ang2, 60, 64, 360, min(1, b.__hpbar_timer / (R2)))\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n            elseif b.__hpbar_timer <= (R1 + R2) then\r\n                misc.Renderhp(b.x, b.y, 90, ang2, 60, 64, 360, 1)\r\n                misc.Renderhp(b.x, b.y, 90 + ang2, ang1, 60, 64, 360, min(1, (b.__hpbar_timer - (R2)) / (R1)))\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n                Render(\"life_node\", b.x + 61 * cos(ang2 + 90), b.y + 61 * sin(ang2 + 90), ang2, 0.55)\r\n            else\r\n                misc.Renderhp(b.x, b.y, 90, ang2, 60, 64, 360, 1)\r\n                misc.Renderhp(b.x, b.y, 90 + ang2, ang1, 60, 64, 360, 1)\r\n                misc.Renderhp(b.x, b.y, 90 + ang_all, 360 - ang_all, 60, 64, 360, b.hpbarlen * min(1, (b.__hpbar_timer - (R_all)) / (b.__hpbar_rendertime * (1 - rate_all))))\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.274, 0.274)\r\n                Render(\"base_hp\", b.x, b.y, 0, 0.256, 0.256)\r\n                Render(\"life_node\", b.x + 61 * cos(ang2 + 90), b.y + 61 * sin(ang2 + 90), ang2, 0.55)\r\n                Render(\"life_node\", b.x + 61 * cos(ang_all + 90), b.y + 61 * sin(ang_all + 90), ang_all, 0.55)\r\n            end\r\n        end\r\n    elseif flag2 == 2 then\r\n        if mode == -1 then\r\n        else\r\n            local c0 = b.__c0\r\n            local c1 = b.__c1\r\n            local c2 = b.__c2\r\n            local c3 = b.__c3\r\n            local c4 = b.__c4\r\n\r\n            SetImageState('hpbar', '', c0)\r\n            if mode == 0 and type == 1 then\r\n                Render('hpbar', -183, 217, 90, 0.25, 2.55 * b.hpbarlen * min(1, b.__hpbar_timer / b.__hpbar_rendertime))\r\n                SetImageState('hpbar', '', c2)\r\n                Render('hpbar', -184, 218, 90, 0.25, 2.55 * b.hpbarlen * min(1, b.__hpbar_timer / b.__hpbar_rendertime))\r\n            elseif mode == 0 and type == 2 then\r\n                Render('hpbar', -183, 217, 90, 0.25, 2.55 * b.hpbarlen * min(1, b.__hpbar_timer / b.__hpbar_rendertime))\r\n                SetImageState('hpbar', '', c1)\r\n                Render('hpbar', -184, 218, 90, 0.25, 2.55 * b.hpbarlen * min(1, b.__hpbar_timer / b.__hpbar_rendertime))\r\n            elseif mode == 2 then\r\n                local now = b.cards[b.card_num]\r\n                local rate = b.__hpbar_defaultpercent * now.hp / b.__hpbar_defaultvalue\r\n                Render('hpbar', -183, 217, 90, 0.25, 2.55 * b.hpbarlen * rate)\r\n                SetImageState('hpbar', '', c2)\r\n                Render('hpbar', -184, 218, 90, 0.25, 2.55 * b.hpbarlen * rate)\r\n            elseif mode == 1 then\r\n                local nextcard\r\n                for n = b.card_num + 1, #b.cards do\r\n                    if b.cards[n] and b.cards[n].is_combat then\r\n                        nextcard = b.cards[n]\r\n                        break\r\n                    end\r\n                end\r\n                local rate = b.__hpbar_defaultpercent * nextcard.hp / b.__hpbar_defaultvalue\r\n                Render('hpbar', -183, 217, 90, 0.25, 2.55 * min(1, b.__hpbar_timer / (b.__hpbar_rendertime * rate)) * rate)\r\n                SetImageState('hpbar', '', c2)\r\n                Render('hpbar', -184, 218, 90, 0.25, 2.55 * min(1, b.__hpbar_timer / (b.__hpbar_rendertime * rate)) * rate)\r\n\r\n                if b.__hpbar_timer > (b.__hpbar_rendertime * rate) then\r\n                    SetImageState('hpbar', '', c0)\r\n                    Render('hpbar', -183 + 2.55 * 128 * rate, 217, 90, 0.25, 2.55 * b.hpbarlen * min(1, (b.__hpbar_timer - (b.__hpbar_rendertime * rate)) / (b.__hpbar_rendertime - (b.__hpbar_rendertime * rate))) * (1 - rate))\r\n                    SetImageState('hpbar', '', c1)\r\n                    Render('hpbar', -184 + 2.55 * 128 * rate, 218, 90, 0.25, 2.55 * b.hpbarlen * min(1, (b.__hpbar_timer - (b.__hpbar_rendertime * rate)) / (b.__hpbar_rendertime - (b.__hpbar_rendertime * rate))) * (1 - rate))\r\n                end\r\n            elseif mode == 4 then\r\n                local now = b.cards[b.card_num]\r\n                local rate = b.__hpbar_defaultpercent * now.hp / b.__hpbar_defaultvalue\r\n                local nextcard\r\n                for n = b.card_num + 1, #b.cards do\r\n                    if b.cards[n] and b.cards[n].is_combat then\r\n                        nextcard = b.cards[n]\r\n                        break\r\n                    end\r\n                end\r\n                local rate_2 = b.__hpbar_defaultpercent * nextcard.hp / b.__hpbar_defaultvalue\r\n                Render('hpbar', -183, 217, 90, 0.25, 2.55 * rate)\r\n                SetImageState('hpbar', '', c2)\r\n                Render('hpbar', -184, 218, 90, 0.25, 2.55 * rate)\r\n                SetImageState('hpbar', '', c0)\r\n                Render('hpbar', -183 + 2.55 * 128 * rate, 217, 90, 0.25, 2.55 * b.hpbarlen * rate_2)\r\n                SetImageState('hpbar', '', c4)\r\n                Render('hpbar', -184 + 2.55 * 128 * rate, 218, 90, 0.25, 2.55 * b.hpbarlen * rate_2)\r\n            elseif mode == 5 then\r\n                local nextcard, next2card, temp\r\n                for n = b.card_num + 1, #b.cards do\r\n                    if b.cards[n] and b.cards[n].is_combat then\r\n                        nextcard = b.cards[n]\r\n                        temp = n\r\n                        break\r\n                    end\r\n                end\r\n                local rate = b.__hpbar_defaultpercent * nextcard.hp / b.__hpbar_defaultvalue\r\n                for n = temp + 1, #b.cards do\r\n                    if b.cards[n] and b.cards[n].is_combat then\r\n                        next2card = b.cards[n]\r\n                        break\r\n                    end\r\n                end\r\n                local rate_2 = b.__hpbar_defaultpercent * next2card.hp / b.__hpbar_defaultvalue\r\n                local R1 = b.__hpbar_rendertime * rate\r\n                local R2 = b.__hpbar_rendertime * rate_2\r\n                local rate_all = rate + rate_2\r\n                local R_all = R1 + R2\r\n\r\n                Render('hpbar', -183, 217, 90, 0.25, 2.55 * min(1, b.__hpbar_timer / (R2)) * rate_2)\r\n                SetImageState('hpbar', '', c2)\r\n                Render('hpbar', -184, 218, 90, 0.25, 2.55 * min(1, b.__hpbar_timer / (R2)) * rate_2)\r\n\r\n                if b.__hpbar_timer > (R2) then\r\n                    SetImageState('hpbar', '', c0)\r\n                    Render('hpbar', -183 + 2.55 * 128 * rate_2, 217, 90, 0.25, 2.55 * min(1, (b.__hpbar_timer - R2) / R1) * rate)\r\n                    SetImageState('hpbar', '', c4)\r\n                    Render('hpbar', -184 + 2.55 * 128 * rate_2, 218, 90, 0.25, 2.55 * min(1, (b.__hpbar_timer - R2) / R1) * rate)\r\n                end\r\n\r\n                if b.__hpbar_timer > (R1 + R2) then\r\n                    SetImageState('hpbar', '', c0)\r\n                    Render('hpbar', -183 + 2.55 * 128 * rate_all, 217, 90, 0.25, 2.55 * b.hpbarlen * min(1, (b.__hpbar_timer - (R_all)) / (b.__hpbar_rendertime - (R_all))) * (1 - rate_all))\r\n                    SetImageState('hpbar', '', c1)\r\n                    Render('hpbar', -184 + 2.55 * 128 * rate_all, 218, 90, 0.25, 2.55 * b.hpbarlen * min(1, (b.__hpbar_timer - (R_all)) / (b.__hpbar_rendertime - (R_all))) * (1 - rate_all))\r\n                end\r\n            elseif mode == 6 then\r\n                local nextcard\r\n                for n = b.card_num + 1, #b.cards do\r\n                    if b.cards[n] and b.cards[n].is_combat then\r\n                        nextcard = b.cards[n]\r\n                        break\r\n                    end\r\n                end\r\n                local now = b.cards[b.card_num]\r\n                local lastcard\r\n                for n = b.card_num - 1, 1, -1 do\r\n                    if b.cards[n] and b.cards[n].is_combat then\r\n                        lastcard = b.cards[n]\r\n                        break\r\n                    end\r\n                end\r\n                local rate = b.__hpbar_defaultpercent * nextcard.hp / b.__hpbar_defaultvalue\r\n                local rate_2 = (1 - rate) * now.hp / (now.hp + lastcard.hp)\r\n\r\n                Render('hpbar', -183, 217, 90, 0.25, 2.55 * rate)\r\n                SetImageState('hpbar', '', c2)\r\n                Render('hpbar', -184, 218, 90, 0.25, 2.55 * rate)\r\n\r\n                SetImageState('hpbar', '', c0)\r\n                Render('hpbar', -183 + 2.55 * 128 * rate, 217, 90, 0.25, 2.55 * b.hpbarlen * rate_2)\r\n                SetImageState('hpbar', '', c3)\r\n                Render('hpbar', -184 + 2.55 * 128 * rate, 218, 90, 0.25, 2.55 * b.hpbarlen * rate_2)\r\n            elseif mode == 7 then\r\n                local nextcard, next2card, temp\r\n                local now = b.cards[b.card_num]\r\n\r\n                for n = b.card_num + 1, #b.cards do\r\n                    if b.cards[n] and b.cards[n].is_combat then\r\n                        nextcard = b.cards[n]\r\n                        temp = n\r\n                        break\r\n                    end\r\n                end\r\n\r\n                for n = temp + 1, #b.cards do\r\n                    if b.cards[n] and b.cards[n].is_combat then\r\n                        next2card = b.cards[n]\r\n                        break\r\n                    end\r\n                end\r\n                local rate_2 = b.__hpbar_defaultpercent * next2card.hp / b.__hpbar_defaultvalue\r\n                local R2 = b.__hpbar_rendertime * rate_2\r\n\r\n                local rate = (1 - rate_2) * nextcard.hp / (now.hp + nextcard.hp)\r\n                local R1 = b.__hpbar_rendertime * rate\r\n                local rate_all = rate + rate_2\r\n                local R_all = R1 + R2\r\n\r\n                Render('hpbar', -183, 217, 90, 0.25, 2.55 * min(1, b.__hpbar_timer / (R2)) * rate_2)\r\n                SetImageState('hpbar', '', c2)\r\n                Render('hpbar', -184, 218, 90, 0.25, 2.55 * min(1, b.__hpbar_timer / (R2)) * rate_2)\r\n\r\n                if b.__hpbar_timer > (R2) then\r\n                    SetImageState('hpbar', '', c0)\r\n                    Render('hpbar', -183 + 2.55 * 128 * rate_2, 217, 90, 0.25, 2.55 * min(1, (b.__hpbar_timer - R2) / R1) * rate)\r\n                    SetImageState('hpbar', '', c3)\r\n                    Render('hpbar', -184 + 2.55 * 128 * rate_2, 218, 90, 0.25, 2.55 * min(1, (b.__hpbar_timer - R2) / R1) * rate)\r\n                end\r\n\r\n                if b.__hpbar_timer > (R1 + R2) then\r\n                    SetImageState('hpbar', '', c0)\r\n                    Render('hpbar', -183 + 2.55 * 128 * rate_all, 217, 90, 0.25, 2.55 * b.hpbarlen * min(1, (b.__hpbar_timer - (R_all)) / (b.__hpbar_rendertime - (R_all))) * (1 - rate_all))\r\n                    SetImageState('hpbar', '', c1)\r\n                    Render('hpbar', -184 + 2.55 * 128 * rate_all, 218, 90, 0.25, 2.55 * b.hpbarlen * min(1, (b.__hpbar_timer - (R_all)) / (b.__hpbar_rendertime - (R_all))) * (1 - rate_all))\r\n                end\r\n\r\n            end\r\n        end\r\n    end\r\nend\r\nif b.show_hp then\r\n    SetFontState(\"bonus\", \"\", Color(255, 0, 0, 0))\r\n    RenderText(\"bonus\", int(max(0, b.hp)) .. \"/\" .. b.maxhp, b.x - 1, b.y - 40 - 1, 0.6, \"centerpoint\")\r\n    SetFontState(\"bonus\", \"\", Color(255, 255, 255, 255))\r\n    RenderText(\"bonus\", int(max(0, b.hp)) .. \"/\" .. b.maxhp, b.x, b.y - 40, 0.6, \"centerpoint\")\r\nend\r\nb.x, b.y = _ox, _oy","EditWindow":"code"}],"AttributeCount":1}
2,{"$type":".Object.ObjectDefine, ","Attributes":[{"attrCap":"Name","attrInput":"SSWTLZZ_fakeboss1","EditWindow":""},{"attrCap":"Difficulty","attrInput":"All","EditWindow":"objDifficulty"}],"AttributeCount":2,"IsExpanded":false}
3,{"$type":".Object.ObjectInit, ","Attributes":[{"attrCap":"Parameter List","attrInput":"t","EditWindow":""},{"attrCap":"Image","attrInput":"\"img_void\"","EditWindow":"objimage"},{"attrCap":"Layer","attrInput":"LAYER_ENEMY","EditWindow":"layer"},{"attrCap":"Group","attrInput":"GROUP_ENEMY","EditWindow":"group"},{"attrCap":"Hide","attrInput":"false","EditWindow":"bool"},{"attrCap":"Bound","attrInput":"true","EditWindow":"bool"},{"attrCap":"Auto Rotation","attrInput":"false","EditWindow":"bool"},{"attrCap":"HP","attrInput":"99999","EditWindow":""},{"attrCap":"Collision","attrInput":"true","EditWindow":"bool"}],"AttributeCount":9}
4,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.bound = false","EditWindow":"code"}],"AttributeCount":1}
4,{"$type":".General.IfNode, LuaSTGEditorSharp","Attributes":[{"attrCap":"Condition","attrInput":"t == 1","EditWindow":""}],"AttributeCount":1}
5,{"$type":".General.IfThen, LuaSTGEditorSharp","Attributes":[]}
6,{"$type":".Boss.SetBossWalkImageSystem, ","Attributes":[{"attrCap":"Image path","attrInput":"SSWTLZZ_walkimage.png","EditWindow":"imageFile"},{"attrCap":"Cols and rows","attrInput":"5,4","EditWindow":"colrow"},{"attrCap":"Number of images","attrInput":"5,4,4,3","EditWindow":"numofimg"},{"attrCap":"Number of repetend","attrInput":"1,1,1","EditWindow":"numofani"},{"attrCap":"Animation interval","attrInput":"6","EditWindow":"animinterval"},{"attrCap":"Collision size","attrInput":"16,16","EditWindow":"size"}],"AttributeCount":6}
5,{"$type":".General.IfElse, LuaSTGEditorSharp","Attributes":[]}
6,{"$type":".Boss.SetBossWalkImageSystem, ","Attributes":[{"attrCap":"Image path","attrInput":"SSWTLZZ_walkimage2.png","EditWindow":"imageFile"},{"attrCap":"Cols and rows","attrInput":"5,4","EditWindow":"colrow"},{"attrCap":"Number of images","attrInput":"5,4,4,3","EditWindow":"numofimg"},{"attrCap":"Number of repetend","attrInput":"1,1,1","EditWindow":"numofani"},{"attrCap":"Animation interval","attrInput":"6","EditWindow":"animinterval"},{"attrCap":"Collision size","attrInput":"16,16","EditWindow":"size"}],"AttributeCount":6}
4,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self._wisys:SetFloat(function(ani)return 0,4*sin(ani*2)end)","EditWindow":"code"}],"AttributeCount":1,"IsExpanded":false}
3,{"$type":".Object.CallBackFunc, ","Attributes":[{"attrCap":"Event type","attrInput":"frame","EditWindow":"event"}],"AttributeCount":1}
4,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"task.Do(self)\r\nself._wisys:frame()","EditWindow":"code"}],"AttributeCount":1}
3,{"$type":".Render.OnRender, ","Attributes":[]}
4,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self._wisys:render()\r\n_render_hp_bar(self)\r\nif (IsValid(_boss)) then\r\n\tlocal _bx, _by = _boss._sc_ring_x, _boss._sc_ring_y\r\n\tlocal _bx2, _by2 = _boss.x, _boss.y\r\n\t_boss._sc_ring_x, _boss._sc_ring_y = self.x, self.y\r\n\t_boss.x, _boss.y = self.x, self.y\r\n\tboss.card.drawSpellCircle(_boss)\r\n\t_boss._sc_ring_x, _boss._sc_ring_y = _bx, _by\r\n\t_boss.x, _boss.y = _bx2, _by2\r\nend","EditWindow":"code"}],"AttributeCount":1}
2,{"$type":".Boss.BossDefine, ","Attributes":[{"attrCap":"Name","attrInput":"SSWTLZZ_boss","EditWindow":""},{"attrCap":"Difficulty","attrInput":"All","EditWindow":"objDifficulty"},{"attrCap":"Displayed name","attrInput":"Fabritis&Iphonea","EditWindow":""},{"attrCap":"Background","attrInput":"starlight_background","EditWindow":"BG"},{"attrCap":"Background Music","attrInput":"\"bgm:SSWTLZZ_bgm\"","EditWindow":"BGM"}],"AttributeCount":5}
3,{"$type":".Boss.BossInit, ","Attributes":[{"attrCap":"Position","attrInput":"0, 684","EditWindow":"position"},{"attrCap":"Spell Card Background","attrInput":"\"SSWTLZZ_scbg\"","EditWindow":"bossBG"}],"AttributeCount":2}
4,{"$type":".Object.SetBlend, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Blend Mode","attrInput":"\"\"","EditWindow":"blend"},{"attrCap":"ARGB","attrInput":"0,255,255,255","EditWindow":"ARGB"}],"AttributeCount":3}
4,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.no_killeff = true\r\nself._bosssys.endChipBonus = function(self, x, y)\r\nend","EditWindow":"code"}],"AttributeCount":1}
3,{"$type":".Boss.Dialog, ","Attributes":[{"attrCap":"Can skip","attrInput":"true","EditWindow":"bool"},{"attrCap":"Suspend gameplay","attrInput":"false","EditWindow":"bool"}],"AttributeCount":2}
4,{"$type":".Task.TaskNode, ","Attributes":[]}
5,{"$type":".General.Folder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"","EditWindow":""}],"AttributeCount":1}
6,{"$type":".General.IfNode, LuaSTGEditorSharp","Attributes":[{"attrCap":"Condition","attrInput":"not IsValid(self.obj1) or not IsValid(self.obj2)","EditWindow":""}],"AttributeCount":1,"IsExpanded":false}
7,{"$type":".General.IfThen, LuaSTGEditorSharp","Attributes":[]}
8,{"$type":".Object.CreateObject, ","Attributes":[{"attrCap":"Name","attrInput":"\"SSWTLZZ_fakeboss1\"","EditWindow":"objectDef"},{"attrCap":"Position","attrInput":"0, 0","EditWindow":"position"},{"attrCap":"Parameters","attrInput":"1","EditWindow":"objectParam"}],"AttributeCount":3}
8,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.obj1 = last","EditWindow":"code"}],"AttributeCount":1}
8,{"$type":".Object.SetBinding, ","Attributes":[{"attrCap":"Master","attrInput":"self","EditWindow":"target"},{"attrCap":"Servant","attrInput":"last","EditWindow":"target"},{"attrCap":"Damage transfer rate","attrInput":"1","EditWindow":""},{"attrCap":"Connect death","attrInput":"false","EditWindow":"bool"}],"AttributeCount":4}
8,{"$type":".Object.CreateObject, ","Attributes":[{"attrCap":"Name","attrInput":"\"SSWTLZZ_fakeboss1\"","EditWindow":"objectDef"},{"attrCap":"Position","attrInput":"0, 0","EditWindow":"position"},{"attrCap":"Parameters","attrInput":"2","EditWindow":"objectParam"}],"AttributeCount":3}
8,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.obj2 = last","EditWindow":"code"}],"AttributeCount":1}
8,{"$type":".Object.SetBinding, ","Attributes":[{"attrCap":"Master","attrInput":"self","EditWindow":"target"},{"attrCap":"Servant","attrInput":"last","EditWindow":"target"},{"attrCap":"Damage transfer rate","attrInput":"1","EditWindow":""},{"attrCap":"Connect death","attrInput":"false","EditWindow":"bool"}],"AttributeCount":4}
8,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.obj1.x, self.obj1.y = 220, 384\r\nself.obj2.x, self.obj2.y = -220, 384","EditWindow":"code"}],"AttributeCount":1}
7,{"$type":".General.IfElse, LuaSTGEditorSharp","Attributes":[]}
6,{"$type":".Task.TaskForObject, ","Attributes":[{"attrCap":"Target","attrInput":"self.obj1","EditWindow":"target"},{"attrCap":"Redirect self","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2}
7,{"$type":".Task.TaskMoveTo, ","Attributes":[{"attrCap":"Destination","attrInput":"-30, 120","EditWindow":"position"},{"attrCap":"Frame","attrInput":"60","EditWindow":""},{"attrCap":"Mode","attrInput":"MOVE_DECEL","EditWindow":"interpolation"}],"AttributeCount":3,"IsExpanded":false}
6,{"$type":".Task.TaskForObject, ","Attributes":[{"attrCap":"Target","attrInput":"self.obj2","EditWindow":"target"},{"attrCap":"Redirect self","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2,"IsExpanded":false}
7,{"$type":".Task.TaskMoveTo, ","Attributes":[{"attrCap":"Destination","attrInput":"30, 120","EditWindow":"position"},{"attrCap":"Frame","attrInput":"60","EditWindow":""},{"attrCap":"Mode","attrInput":"MOVE_DECEL","EditWindow":"interpolation"}],"AttributeCount":3}
6,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"120","EditWindow":"yield"}],"AttributeCount":1}
3,{"$type":".General.Comment, LuaSTGEditorSharp","Attributes":[{"attrCap":"Comment","attrInput":"2","EditWindow":""},{"attrCap":"Comment on child","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2}
3,{"$type":".Boss.BossSpellCard, ","Attributes":[{"attrCap":"Name","attrInput":"「进化大战 ~ 甜 vs 咸」","EditWindow":"SCName"},{"attrCap":"Protect time (sec)","attrInput":"2","EditWindow":""},{"attrCap":"DMG redu. time (sec)","attrInput":"5","EditWindow":""},{"attrCap":"Total time (sec)","attrInput":"60","EditWindow":""},{"attrCap":"Hit point","attrInput":"600","EditWindow":""},{"attrCap":"Drop power","attrInput":"0","EditWindow":""},{"attrCap":"Drop faith","attrInput":"0","EditWindow":""},{"attrCap":"Drop point","attrInput":"0","EditWindow":""},{"attrCap":"Immune to bomb","attrInput":"false","EditWindow":"bool"},{"attrCap":"Performing action","attrInput":"true","EditWindow":"bool"},{"attrCap":"Optional ID","attrInput":"","EditWindow":""}],"AttributeCount":11}
4,{"$type":".Boss.BossSCBeforeStart, ","Attributes":[]}
4,{"$type":".Boss.BossSCStart, ","Attributes":[]}
5,{"$type":".Task.TaskNode, ","Attributes":[]}
6,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"120","EditWindow":"yield"}],"AttributeCount":1}
6,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"local obj1, obj2 = self.obj1, self.obj2","EditWindow":"code"}],"AttributeCount":1}
6,{"$type":".Task.TaskForObject, ","Attributes":[{"attrCap":"Target","attrInput":"self.obj1","EditWindow":"target"},{"attrCap":"Redirect self","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2}
7,{"$type":".Task.TaskMoveTo, ","Attributes":[{"attrCap":"Destination","attrInput":"160, 180","EditWindow":"position"},{"attrCap":"Frame","attrInput":"60","EditWindow":""},{"attrCap":"Mode","attrInput":"MOVE_DECEL","EditWindow":"interpolation"}],"AttributeCount":3}
7,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"60","EditWindow":"yield"}],"AttributeCount":1}
7,{"$type":".Task.TaskNode, ","Attributes":[]}
8,{"$type":".Advanced.AdvancedRepeat.AdvancedRepeat, LuaSTGEditorSharp","Attributes":[{"attrCap":"Times","attrInput":"180","EditWindow":"yield"}],"AttributeCount":1,"IsExpanded":false}
9,{"$type":".Advanced.AdvancedRepeat.VariableCollection, LuaSTGEditorSharp","Attributes":[]}
10,{"$type":".Advanced.AdvancedRepeat.IncrementVariable, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"a1","EditWindow":""},{"attrCap":"Initial value","attrInput":"ran:Float(0,360)","EditWindow":""},{"attrCap":"Increment","attrInput":"10.5","EditWindow":""}],"AttributeCount":3}
9,{"$type":".Advanced.AdvancedRepeat.AdvancedRepeat, LuaSTGEditorSharp","Attributes":[{"attrCap":"Times","attrInput":"2","EditWindow":"yield"}],"AttributeCount":1}
10,{"$type":".Advanced.AdvancedRepeat.VariableCollection, LuaSTGEditorSharp","Attributes":[]}
11,{"$type":".Advanced.AdvancedRepeat.LinearVariable, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"a2","EditWindow":""},{"attrCap":"From","attrInput":"0","EditWindow":""},{"attrCap":"To","attrInput":"360","EditWindow":""},{"attrCap":"Precisely","attrInput":"false","EditWindow":"bool"},{"attrCap":"Mode","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"}],"AttributeCount":5}
10,{"$type":".Advanced.AdvancedRepeat.AdvancedRepeat, LuaSTGEditorSharp","Attributes":[{"attrCap":"Times","attrInput":"4","EditWindow":"yield"}],"AttributeCount":1,"IsExpanded":false}
11,{"$type":".Advanced.AdvancedRepeat.VariableCollection, LuaSTGEditorSharp","Attributes":[]}
12,{"$type":".Advanced.AdvancedRepeat.LinearVariable, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"a3","EditWindow":""},{"attrCap":"From","attrInput":"0","EditWindow":""},{"attrCap":"To","attrInput":"10.5","EditWindow":""},{"attrCap":"Precisely","attrInput":"false","EditWindow":"bool"},{"attrCap":"Mode","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"}],"AttributeCount":5}
12,{"$type":".Advanced.AdvancedRepeat.IncrementVariable, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"i","EditWindow":""},{"attrCap":"Initial value","attrInput":"1","EditWindow":""},{"attrCap":"Increment","attrInput":"1","EditWindow":""}],"AttributeCount":3}
11,{"$type":".General.Folder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"","EditWindow":""}],"AttributeCount":1}
12,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"local x, y = _circle(self.x, self.y, 35, a1 + a2 + a3)","EditWindow":"code"}],"AttributeCount":1}
12,{"$type":".Bullet.CreateSimpleBullet, ","Attributes":[{"attrCap":"Style","attrInput":"ball_small","EditWindow":"bulletStyle"},{"attrCap":"Color","attrInput":"COLOR_DEEP_GRAY","EditWindow":"color"},{"attrCap":"Position","attrInput":"x, y","EditWindow":"position"},{"attrCap":"Velocity","attrInput":"5","EditWindow":"velocity"},{"attrCap":"Angle","attrInput":"-(a1 + a3) * 1.25 + a2 ","EditWindow":"rotation"},{"attrCap":"Aim to player","attrInput":"false","EditWindow":"bool"},{"attrCap":"Rotation velocity","attrInput":"0","EditWindow":""},{"attrCap":"Stay on create","attrInput":"false","EditWindow":"bool"},{"attrCap":"Destroyable","attrInput":"true","EditWindow":"bool"},{"attrCap":"Time","attrInput":"0","EditWindow":""},{"attrCap":"Rebound","attrInput":"false","EditWindow":"bool"},{"attrCap":"Acceleration","attrInput":"0","EditWindow":""},{"attrCap":"Accel Angle","attrInput":"0","EditWindow":"rotation"},{"attrCap":"Max Velocity","attrInput":"0","EditWindow":"velocity"},{"attrCap":"Shuttle","attrInput":"false","EditWindow":"bool"}],"AttributeCount":15}
12,{"$type":".General.IfNode, LuaSTGEditorSharp","Attributes":[{"attrCap":"Condition","attrInput":"i ~= 1","EditWindow":""}],"AttributeCount":1,"IsExpanded":false}
13,{"$type":".General.IfThen, LuaSTGEditorSharp","Attributes":[]}
14,{"$type":".Task.TaskForObject, ","Attributes":[{"attrCap":"Target","attrInput":"last","EditWindow":"target"},{"attrCap":"Redirect self","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2}
15,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"30","EditWindow":"yield"}],"AttributeCount":1}
15,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"self.colli = false","EditWindow":"code"}],"AttributeCount":1}
15,{"$type":".Task.SmoothSetValueTo, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"nullabletarget"},{"attrCap":"Waiting time","attrInput":"0","EditWindow":""},{"attrCap":"Duration","attrInput":"30","EditWindow":""},{"$type":".DependencyAttrItem, ","attrCap":"Number of Value","attrInput":"2","EditWindow":""},{"attrCap":"Value 1 name","attrInput":"vscale","EditWindow":"prop"},{"attrCap":"Target value 1","attrInput":"0","EditWindow":""},{"attrCap":"Interpolation mode 1","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"},{"attrCap":"Modification mode 1","attrInput":"MODE_SET","EditWindow":"modification"},{"attrCap":"Value 2 name","attrInput":"hscale","EditWindow":"prop"},{"attrCap":"Target value 2","attrInput":"0","EditWindow":""},{"attrCap":"Interpolation mode 2","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"},{"attrCap":"Modification mode 2","attrInput":"MODE_SET","EditWindow":"modification"}],"AttributeCount":12}
15,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"30","EditWindow":"yield"}],"AttributeCount":1}
15,{"$type":".Object.Del, ","Attributes":[{"attrCap":"Target","attrInput":"self","EditWindow":"target"},{"attrCap":"Trigger event","attrInput":"false","EditWindow":"bool"}],"AttributeCount":2}
13,{"$type":".General.IfElse, LuaSTGEditorSharp","Attributes":[]}
12,{"$type":".Object.SetBlend, ","Attributes":[{"attrCap":"Target","attrInput":"last","EditWindow":"target"},{"attrCap":"Blend Mode","attrInput":"\"mul+add\"","EditWindow":"blend"},{"attrCap":"ARGB","attrInput":"0,255,255,255","EditWindow":"ARGB"}],"AttributeCount":3}
12,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"last.class = last.logclass\r\nlast.hscale = 3\r\nlast.vscale = 3","EditWindow":"code"}],"AttributeCount":1}
12,{"$type":".Task.SmoothSetValueTo, ","Attributes":[{"attrCap":"Target","attrInput":"last","EditWindow":"nullabletarget"},{"attrCap":"Waiting time","attrInput":"0","EditWindow":""},{"attrCap":"Duration","attrInput":"60","EditWindow":""},{"$type":".DependencyAttrItem, ","attrCap":"Number of Value","attrInput":"4","EditWindow":""},{"attrCap":"Value 1 name","attrInput":"_speed","EditWindow":"prop"},{"attrCap":"Target value 1","attrInput":"0.5","EditWindow":""},{"attrCap":"Interpolation mode 1","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"},{"attrCap":"Modification mode 1","attrInput":"MODE_SET","EditWindow":"modification"},{"attrCap":"Value 2 name","attrInput":"hscale","EditWindow":"prop"},{"attrCap":"Target value 2","attrInput":"1","EditWindow":""},{"attrCap":"Interpolation mode 2","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"},{"attrCap":"Modification mode 2","attrInput":"MODE_SET","EditWindow":"modification"},{"attrCap":"Value 3 name","attrInput":"vscale","EditWindow":"prop"},{"attrCap":"Target value 3","attrInput":"1","EditWindow":""},{"attrCap":"Interpolation mode 3","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"},{"attrCap":"Modification mode 3","attrInput":"MODE_SET","EditWindow":"modification"},{"attrCap":"Value 4 name","attrInput":"_a","EditWindow":"prop"},{"attrCap":"Target value 4","attrInput":"255","EditWindow":""},{"attrCap":"Interpolation mode 4","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"},{"attrCap":"Modification mode 4","attrInput":"MODE_SET","EditWindow":"modification"}],"AttributeCount":20}
12,{"$type":".Task.SmoothSetValueTo, ","Attributes":[{"attrCap":"Target","attrInput":"last","EditWindow":"nullabletarget"},{"attrCap":"Waiting time","attrInput":"60","EditWindow":""},{"attrCap":"Duration","attrInput":"120","EditWindow":""},{"$type":".DependencyAttrItem, ","attrCap":"Number of Value","attrInput":"1","EditWindow":""},{"attrCap":"Value 1 name","attrInput":"_speed","EditWindow":"prop"},{"attrCap":"Target value 1","attrInput":"3","EditWindow":""},{"attrCap":"Interpolation mode 1","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"},{"attrCap":"Modification mode 1","attrInput":"MODE_SET","EditWindow":"modification"}],"AttributeCount":8}
9,{"$type":".Audio.PlaySE, ","Attributes":[{"attrCap":"Name","attrInput":"\"kira00\"","EditWindow":"se"},{"attrCap":"Volume","attrInput":"0.1","EditWindow":""},{"attrCap":"Pan","attrInput":"self.x/256","EditWindow":""},{"attrCap":"Ignore default volume","attrInput":"false","EditWindow":"bool"}],"AttributeCount":4}
9,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"1","EditWindow":"yield"}],"AttributeCount":1}
7,{"$type":".Task.TaskNode, ","Attributes":[]}
8,{"$type":".Advanced.AdvancedRepeat.AdvancedRepeat, LuaSTGEditorSharp","Attributes":[{"attrCap":"Times","attrInput":"60","EditWindow":"yield"}],"AttributeCount":1}
9,{"$type":".Advanced.AdvancedRepeat.VariableCollection, LuaSTGEditorSharp","Attributes":[]}
10,{"$type":".Advanced.AdvancedRepeat.IncrementVariable, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"t","EditWindow":""},{"attrCap":"Initial value","attrInput":"180","EditWindow":""},{"attrCap":"Increment","attrInput":"-3","EditWindow":""}],"AttributeCount":3}
9,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"local d, a = Dist(self, obj2) / 250, Angle(self, obj2)","EditWindow":"code"}],"AttributeCount":1}
9,{"$type":".Advanced.AdvancedRepeat.AdvancedRepeat, LuaSTGEditorSharp","Attributes":[{"attrCap":"Times","attrInput":"3","EditWindow":"yield"}],"AttributeCount":1}
10,{"$type":".Advanced.AdvancedRepeat.VariableCollection, LuaSTGEditorSharp","Attributes":[]}
11,{"$type":".Advanced.AdvancedRepeat.LinearVariable, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"a1","EditWindow":""},{"attrCap":"From","attrInput":"0","EditWindow":""},{"attrCap":"To","attrInput":"360","EditWindow":""},{"attrCap":"Precisely","attrInput":"false","EditWindow":"bool"},{"attrCap":"Mode","attrInput":"MOVE_NORMAL","EditWindow":"interpolation"}],"AttributeCount":5,"IsSelected":true}
10,{"$type":".Bullet.CreateSimpleBullet, ","Attributes":[{"attrCap":"Style","attrInput":"grain_a","EditWindow":"bulletStyle"},{"attrCap":"Color","attrInput":"COLOR_RED","EditWindow":"color"},{"attrCap":"Position","attrInput":"self.x,self.y","EditWindow":"position"},{"attrCap":"Velocity","attrInput":"3 * da","EditWindow":"velocity"},{"attrCap":"Angle","attrInput":"a1 + a","EditWindow":"rotation"},{"attrCap":"Aim to player","attrInput":"false","EditWindow":"bool"},{"attrCap":"Rotation velocity","attrInput":"0","EditWindow":""},{"attrCap":"Stay on create","attrInput":"true","EditWindow":"bool"},{"attrCap":"Destroyable","attrInput":"true","EditWindow":"bool"},{"attrCap":"Time","attrInput":"0","EditWindow":""},{"attrCap":"Rebound","attrInput":"false","EditWindow":"bool"},{"attrCap":"Acceleration","attrInput":"0","EditWindow":""},{"attrCap":"Accel Angle","attrInput":"0","EditWindow":"rotation"},{"attrCap":"Max Velocity","attrInput":"0","EditWindow":"velocity"},{"attrCap":"Shuttle","attrInput":"false","EditWindow":"bool"}],"AttributeCount":15}
9,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"3","EditWindow":"yield"}],"AttributeCount":1}
7,{"$type":".Task.TaskMoveTo, ","Attributes":[{"attrCap":"Destination","attrInput":"-self.x, self.y","EditWindow":"position"},{"attrCap":"Frame","attrInput":"180","EditWindow":""},{"attrCap":"Mode","attrInput":"MOVE_ACC_DEC","EditWindow":"interpolation"}],"AttributeCount":3}
6,{"$type":".Task.TaskForObject, ","Attributes":[{"attrCap":"Target","attrInput":"self.obj2","EditWindow":"target"},{"attrCap":"Redirect self","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2}
7,{"$type":".Task.TaskMoveTo, ","Attributes":[{"attrCap":"Destination","attrInput":"-160, -180","EditWindow":"position"},{"attrCap":"Frame","attrInput":"60","EditWindow":""},{"attrCap":"Mode","attrInput":"MOVE_DECEL","EditWindow":"interpolation"}],"AttributeCount":3}
7,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"210","EditWindow":"yield"}],"AttributeCount":1}
7,{"$type":".Advanced.AdvancedRepeat.AdvancedRepeat, LuaSTGEditorSharp","Attributes":[{"attrCap":"Times","attrInput":"12","EditWindow":"yield"}],"AttributeCount":1}
8,{"$type":".Advanced.AdvancedRepeat.VariableCollection, LuaSTGEditorSharp","Attributes":[]}
8,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"15","EditWindow":"yield"}],"AttributeCount":1}
7,{"$type":".Task.TaskMoveTo, ","Attributes":[{"attrCap":"Destination","attrInput":"-self.x, self.y","EditWindow":"position"},{"attrCap":"Frame","attrInput":"180","EditWindow":""},{"attrCap":"Mode","attrInput":"MOVE_ACC_DEC","EditWindow":"interpolation"}],"AttributeCount":3}
4,{"$type":".Boss.BossSCBeforeFinish, ","Attributes":[]}
5,{"$type":".General.Folder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"","EditWindow":""}],"AttributeCount":1}
6,{"$type":".General.IfNode, LuaSTGEditorSharp","Attributes":[{"attrCap":"Condition","attrInput":"self.chip_bonus","EditWindow":""}],"AttributeCount":1,"IsExpanded":false}
7,{"$type":".General.IfThen, LuaSTGEditorSharp","Attributes":[]}
8,{"$type":".Object.DropItem, ","Attributes":[{"attrCap":"Item","attrInput":"item_chip","EditWindow":"item"},{"attrCap":"Number","attrInput":"1","EditWindow":""},{"attrCap":"Position","attrInput":"self.obj2.x,self.obj2.y","EditWindow":"position"}],"AttributeCount":3}
7,{"$type":".General.IfElse, LuaSTGEditorSharp","Attributes":[]}
6,{"$type":".General.IfNode, LuaSTGEditorSharp","Attributes":[{"attrCap":"Condition","attrInput":"self.bombchip_bonus","EditWindow":""}],"AttributeCount":1,"IsExpanded":false}
7,{"$type":".General.IfThen, LuaSTGEditorSharp","Attributes":[]}
8,{"$type":".Object.DropItem, ","Attributes":[{"attrCap":"Item","attrInput":"item_bombchip","EditWindow":"item"},{"attrCap":"Number","attrInput":"1","EditWindow":""},{"attrCap":"Position","attrInput":"self.obj1.x,self.obj1.y","EditWindow":"position"}],"AttributeCount":3}
7,{"$type":".General.IfElse, LuaSTGEditorSharp","Attributes":[]}
6,{"$type":".General.IfNode, LuaSTGEditorSharp","Attributes":[{"attrCap":"Condition","attrInput":"ext.sc_pr","EditWindow":""}],"AttributeCount":1,"IsExpanded":false}
7,{"$type":".General.IfThen, LuaSTGEditorSharp","Attributes":[]}
8,{"$type":".General.Folder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"","EditWindow":""}],"AttributeCount":1}
9,{"$type":".Task.TaskForObject, ","Attributes":[{"attrCap":"Target","attrInput":"self.obj1","EditWindow":"target"},{"attrCap":"Redirect self","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2,"IsExpanded":false}
10,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"New(boss_death_ef, self.x, self.y, true, true)","EditWindow":"code"}],"AttributeCount":1}
10,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"150","EditWindow":"yield"}],"AttributeCount":1}
10,{"$type":".Task.TaskMoveTo, ","Attributes":[{"attrCap":"Destination","attrInput":"-330, 320","EditWindow":"position"},{"attrCap":"Frame","attrInput":"60","EditWindow":""},{"attrCap":"Mode","attrInput":"MOVE_DECEL","EditWindow":"interpolation"}],"AttributeCount":3}
9,{"$type":".Task.TaskForObject, ","Attributes":[{"attrCap":"Target","attrInput":"self.obj2","EditWindow":"target"},{"attrCap":"Redirect self","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2,"IsExpanded":false}
10,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"New(boss_death_ef, self.x, self.y, true, true)","EditWindow":"code"}],"AttributeCount":1,"IsExpanded":false}
10,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"150","EditWindow":"yield"}],"AttributeCount":1,"IsExpanded":false}
10,{"$type":".Task.TaskMoveTo, ","Attributes":[{"attrCap":"Destination","attrInput":"330, 320","EditWindow":"position"},{"attrCap":"Frame","attrInput":"60","EditWindow":""},{"attrCap":"Mode","attrInput":"MOVE_DECEL","EditWindow":"interpolation"}],"AttributeCount":3}
7,{"$type":".General.IfElse, LuaSTGEditorSharp","Attributes":[]}
4,{"$type":".Boss.BossSCFinish, ","Attributes":[],"IsExpanded":false}
4,{"$type":".Boss.BossSCAfter, ","Attributes":[]}
5,{"$type":".General.IfNode, LuaSTGEditorSharp","Attributes":[{"attrCap":"Condition","attrInput":"ext.sc_pr","EditWindow":""}],"AttributeCount":1}
6,{"$type":".General.IfThen, LuaSTGEditorSharp","Attributes":[]}
7,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"90","EditWindow":"yield"}],"AttributeCount":1,"IsExpanded":false}
6,{"$type":".General.IfElse, LuaSTGEditorSharp","Attributes":[]}
2,{"$type":".Stage.StageGroup, ","Attributes":[{"attrCap":"Name","attrInput":"SpellCard","EditWindow":"stageGroup"},{"attrCap":"Start life","attrInput":"7","EditWindow":""},{"attrCap":"Start power","attrInput":"400","EditWindow":""},{"attrCap":"Start faith","attrInput":"50000","EditWindow":""},{"attrCap":"Start bomb","attrInput":"3","EditWindow":""},{"attrCap":"Allow practice","attrInput":"true","EditWindow":"bool"},{"attrCap":"Difficulty value","attrInput":"1","EditWindow":"difficulty"}],"AttributeCount":7,"IsExpanded":false}
3,{"$type":".Stage.Stage, ","Attributes":[{"attrCap":"Name","attrInput":"SpellCard","EditWindow":""},{"attrCap":"Start life (practice)","attrInput":"7","EditWindow":""},{"attrCap":"Start power (practice)","attrInput":"400","EditWindow":""},{"attrCap":"Start faith (practice)","attrInput":"50000","EditWindow":""},{"attrCap":"Start bomb (practice)","attrInput":"3","EditWindow":""},{"attrCap":"Allow practice","attrInput":"true","EditWindow":"bool"}],"AttributeCount":6}
4,{"$type":".Task.TaskNode, ","Attributes":[]}
5,{"$type":".General.Folder, LuaSTGEditorSharp","Attributes":[{"attrCap":"Name","attrInput":"Initialize","EditWindow":""}],"AttributeCount":1}
6,{"$type":".General.Code, LuaSTGEditorSharp","Attributes":[{"attrCap":"Code","attrInput":"LoadMusic('spellcard','THlib\\\\music\\\\spellcard.ogg',75,0xc36e80/44100/4)","EditWindow":"code"}],"AttributeCount":1}
6,{"$type":".Stage.StageBG, ","Attributes":[{"attrCap":"Background","attrInput":"starlight_background","EditWindow":"BG"}],"AttributeCount":1}
5,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"60","EditWindow":"yield"}],"AttributeCount":1}
5,{"$type":".Audio.PlayBGM, ","Attributes":[{"attrCap":"Name","attrInput":"\"bgm:SSWTLZZ_bgm\"","EditWindow":"BGM"},{"attrCap":"Time","attrInput":"","EditWindow":""},{"attrCap":"Set stage time","attrInput":"false","EditWindow":"bool"}],"AttributeCount":3,"IsExpanded":false}
5,{"$type":".Boss.CreateBoss, ","Attributes":[{"attrCap":"Name","attrInput":"\"SSWTLZZ_boss\"","EditWindow":"bossDef"},{"attrCap":"Wait","attrInput":"true","EditWindow":"bool"}],"AttributeCount":2}
5,{"$type":".Task.TaskWait, ","Attributes":[{"attrCap":"Time","attrInput":"180","EditWindow":"yield"}],"AttributeCount":1}
